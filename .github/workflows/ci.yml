# vim: ts=2:sw=2:sts=2:et:ft=yaml
# -*- mode: yaml; yaml-indent-offset: 2; indent-tabs-mode: nil; -*-
---
name: Ansible Collection CI

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  pull_request:

jobs:
  linux-sanity:
    name: Sanity (${{ matrix.os }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          # Debian versions
          - debian:11
          - debian:12
          # Ubuntu LTS versions
          - ubuntu:20.04
          - ubuntu:22.04
          - ubuntu:24.04
          # Fedora
          - fedora:39
          - fedora:latest
          # Enterprise Linux
          - rockylinux:8
          - rockylinux:9
          - almalinux:8
          - almalinux:9
          - quay.io/centos/centos:stream9
          # openSUSE
          - opensuse/leap:15.5
          - opensuse/leap:latest
          # Arch
          - archlinux:latest
          # Alpine
          - alpine:3.19
          - alpine:latest
    steps:
      - uses: actions/checkout@v4

      - name: Run sanity tests in container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/root/ansible_collections/o0_o/posix \
            -w /root/ansible_collections/o0_o/posix \
            ${{ matrix.os }} sh -c '
              set -e
              
              # Install build dependencies for pyenv
              case "${{ matrix.os }}" in
                debian:*|ubuntu:*)
                  apt-get update && apt-get install -y bash git curl tar findutils build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
                  ;;
                fedora:*|rockylinux:*|almalinux:*|*/centos*)
                  dnf install -y --allowerasing bash git curl tar findutils gcc make openssl-devel bzip2-devel libffi-devel zlib-devel readline-devel sqlite-devel xz-devel
                  ;;
                opensuse/*)
                  zypper install -y bash git curl tar gzip findutils gcc make openssl-devel libbz2-devel libffi-devel zlib-devel readline-devel sqlite3-devel xz-devel
                  ;;
                archlinux:*)
                  pacman -Sy --noconfirm bash git curl tar findutils base-devel openssl zlib bzip2 libffi readline sqlite xz
                  ;;
                alpine:*)
                  apk add --no-cache bash git curl tar findutils build-base openssl-dev zlib-dev bzip2-dev libffi-dev readline-dev sqlite-dev xz-dev coreutils
                  ;;
              esac
              
              # Now switch to bash for pyenv (which requires bash)
              exec bash -c "
                set -e
                export PYENV_ROOT=\"/root/.pyenv\"
                curl -s https://pyenv.run | bash
                export PATH=\"/root/.pyenv/bin:\$PATH\"
                eval \"\$(pyenv init -)\"
                
                # Install latest patch versions for each major.minor
                #pyenv install 3.9:latest  
                #pyenv install 3.10:latest
                #pyenv install 3.11:latest
                #pyenv install 3.12:latest
                pyenv install 3.13:latest
                
                # Set global to 3.13 for ansible-core installation  
                pyenv global \$(pyenv versions --bare | grep '^3\.13\.' | sort -V | tail -1)
                
                # Make pyenv Python available system-wide for integration tests
                echo \"export PATH=\\\"/root/.pyenv/bin:\\\$PATH\\\"\" >> /root/.profile
                echo \"eval \\\"\\\$(pyenv init -)\\\"\" >> /root/.profile
                
                # Create essential symlinks only
                mkdir -p /usr/local/bin
                ln -sf /root/.pyenv/shims/python3 /usr/local/bin/python3
                ln -sf /root/.pyenv/shims/python /usr/local/bin/python
                
                # Create venv with latest Python and install ansible-core
                git config --global --add safe.directory /root/ansible_collections/o0_o/posix
                python -m venv .venv
                . .venv/bin/activate
                pip install --upgrade pip
                pip install ansible-core
                
                # Run sanity tests across all installed Python versions
                ansible-test sanity --venv 2>&1
              "
            '

  #linux-units:
  #  name: Units (${{ matrix.os }})
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      os:
  #        # Debian versions
  #        - debian:11
  #        - debian:12
  #        # Ubuntu LTS versions
  #        - ubuntu:22.04
  #        - ubuntu:24.04
  #        # Fedora
  #        - fedora:39
  #        - fedora:latest
  #        # Enterprise Linux
  #        - rockylinux:9
  #        - almalinux:9
  #        - quay.io/centos/centos:stream9
  #        # openSUSE
  #        - opensuse/leap:15.5
  #        - opensuse/leap:latest
  #        # Arch
  #        - archlinux:latest
  #        # Alpine
  #        - alpine:3.19
  #        - alpine:latest
  #  steps:
  #    - uses: actions/checkout@v4
  #
  #    - name: Run unit tests in container
  #      run: |
  #        docker run --rm \
  #          -v ${{ github.workspace }}:/root/ansible_collections/o0_o/posix \
  #          -w /root/ansible_collections/o0_o/posix \
  #          ${{ matrix.os }} sh -c '
  #            # Minimal Python setup for containers that need it
  #            case "${{ matrix.os }}" in
  #              debian:*|ubuntu:*)
  #                apt-get update && apt-get install -y python3-venv git
  #                ;;
  #              fedora:*|rockylinux:*|almalinux:*|*/centos*)
  #                dnf install -y python3 git
  #                ;;
  #              opensuse/*)
  #                zypper install -y python3 git
  #                ;;
  #              archlinux:*)
  #                pacman -Sy --noconfirm python git
  #                ;;
  #              alpine:*)
  #                apk add --no-cache python3 git
  #                ;;
  #            esac
  #
  #            # Create venv and run unit tests
  #            git config --global --add safe.directory /root/ansible_collections/o0_o/posix
  #            python3 -m venv .venv
  #            . .venv/bin/activate
  #            pip install --upgrade pip
  #            pip install ansible-core
  #            ansible-test units --venv
  #          '

  #linux-integration:
  #  name: Integration (${{ matrix.os }})
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      os:
  #        # Debian versions
  #        - debian:11
  #        - debian:12
  #        # Ubuntu LTS versions
  #        - ubuntu:22.04
  #        - ubuntu:24.04
  #        # Fedora
  #        - fedora:39
  #        - fedora:latest
  #        # Enterprise Linux
  #        - rockylinux:9
  #        - almalinux:9
  #        - quay.io/centos/centos:stream9
  #        # openSUSE
  #        - opensuse/leap:15.5
  #        - opensuse/leap:latest
  #        # Arch
  #        - archlinux:latest
  #        # Alpine
  #        - alpine:3.19
  #        - alpine:latest
  #  steps:
  #    - uses: actions/checkout@v4
  #
  #    - name: Run integration tests in container
  #      run: |
  #        docker run --rm \
  #          -v ${{ github.workspace }}:/root/ansible_collections/o0_o/posix \
  #          -w /root/ansible_collections/o0_o/posix \
  #          ${{ matrix.os }} sh -c '
  #            # Minimal Python setup for containers that need it
  #            case "${{ matrix.os }}" in
  #              debian:*|ubuntu:*)
  #                apt-get update && apt-get install -y python3-venv git
  #                ;;
  #              fedora:*|rockylinux:*|almalinux:*|*/centos*)
  #                dnf install -y python3 git
  #                ;;
  #              opensuse/*)
  #                zypper install -y python3 git
  #                ;;
  #              archlinux:*)
  #                pacman -Sy --noconfirm python git
  #                ;;
  #              alpine:*)
  #                apk add --no-cache python3 git
  #                ;;
  #            esac
  #
  #            # Create venv and run integration tests
  #            git config --global --add safe.directory /root/ansible_collections/o0_o/posix
  #            python3 -m venv .venv
  #            . .venv/bin/activate
  #            pip install --upgrade pip
  #            pip install ansible-core
  #            ansible-test integration --venv
  #          '

  macos-sanity:
    name: Sanity (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-13
          - macos-14
          - macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python versions via Homebrew
        run: |
          brew install python@3.9 python@3.10 python@3.11 python@3.12 python@3.13

      - name: Run sanity tests
        run: |
          # Create proper ansible collections structure
          mkdir -p ../../../ansible_collections/o0_o
          cp -R . ../../../ansible_collections/o0_o/posix
          cd ../../../ansible_collections/o0_o/posix

          # Use Python 3.13 for ansible-core installation
          python3.13 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install ansible-core
          
          # Run sanity tests across all Python versions
          ansible-test sanity --venv

  #macos-units:
  #  name: Units (${{ matrix.os }})
  #  runs-on: ${{ matrix.os }}
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      os:
  #        - macos-13
  #        - macos-14
  #        - macos-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #
  #    - name: Setup Python
  #      uses: actions/setup-python@v5
  #      with:
  #        python-version: '3.x'
  #
  #    - name: Run unit tests
  #      run: |
  #        # Create proper ansible collections structure
  #        mkdir -p ../../../ansible_collections/o0_o
  #        cp -R . ../../../ansible_collections/o0_o/posix
  #        cd ../../../ansible_collections/o0_o/posix
  #
  #        python3 -m venv .venv
  #        source .venv/bin/activate
  #        pip install --upgrade pip
  #        pip install ansible-core
  #        ansible-test units --venv

  #macos-integration:
  #  name: Integration (${{ matrix.os }})
  #  runs-on: ${{ matrix.os }}
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      os:
  #        - macos-13
  #        - macos-14
  #        - macos-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #
  #    - name: Setup Python
  #      uses: actions/setup-python@v5
  #      with:
  #        python-version: '3.x'
  #
  #    - name: Run integration tests
  #      run: |
  #        # Create proper ansible collections structure
  #        mkdir -p ../../../ansible_collections/o0_o
  #        cp -R . ../../../ansible_collections/o0_o/posix
  #        cd ../../../ansible_collections/o0_o/posix
  #
  #        python3 -m venv .venv
  #        source .venv/bin/activate
  #        pip install --upgrade pip
  #        pip install ansible-core
  #        ansible-test integration --venv

  build:
    name: Build Collection
    runs-on: ubuntu-latest
    needs: [linux-sanity, macos-sanity]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible Core
        run: pip install ansible-core

      - name: Build Collection
        run: ansible-galaxy collection build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ansible-collection-tarball
          path: ./*.tar.gz

  # Original comprehensive matrix (commented for MVP)
  # docker-sanity:
  #   name: Sanity tests on Linux
  #   runs-on: ubuntu-24.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: &containers
  #         - debian:9
  #         - debian:10
  #         - debian:11
  #         - debian:12
  #         - debian:latest
  #         - ubuntu:22.04
  #         - ubuntu:latest  # LTS
  #         - ubuntu:rolling
  #         - fedora:38
  #         - fedora:39
  #         - fedora:latest
  #         - rockylinux:9
  #         - rockylinux:latest
  #         - almalinux:9
  #         - almalinux:latest
  #         - quay.io/centos/centos:stream8
  #         - quay.io/centos/centos:stream9
  #         - quay.io/centos/centos:stream
  #         - opensuse/leap:15.4
  #         - opensuse/leap:15.5
  #         - opensuse/leap:latest
  #         - opensuse/tumbleweed
  #         - archlinux:latest
  #         - alpine:3.18
  #         - alpine:3.19
  #         - alpine:latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Run in container
  #       run: |
  #         docker pull ${{ matrix.os }} || true
  #         docker run --rm \
  #           -v $PWD:/workspace \
  #           -w /workspace \
  #           ${{ matrix.os }} /bin/sh -c "\
  #             python3 -m venv .venv && \
  #             . ./.venv/bin/activate && \
  #             pip install ansible-core && \
  #             ansible-test sanity --venv"
  #
  # docker-units:
  #   name: Unit tests on Linux
  #   runs-on: ubuntu-24.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: *containers
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Run in container
  #       run: |
  #         docker pull ${{ matrix.os }} || true
  #         docker run --rm \
  #           -v $PWD:/workspace \
  #           -w /workspace \
  #           ${{ matrix.os }} /bin/sh -c "\
  #             python3 -m venv .venv && \
  #             . ./.venv/bin/activate && \
  #             pip install ansible-core && \
  #             ansible-test units --venv"
  #
  # docker-integration:
  #   name: Integration tests on Linux
  #   runs-on: ubuntu-24.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: *containers
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Run in container
  #       run: |
  #         docker pull ${{ matrix.os }} || true
  #         docker run --rm \
  #           -v $PWD:/workspace \
  #           -w /workspace \
  #           ${{ matrix.os }} /bin/sh -c "\
  #             python3 -m venv .venv && \
  #             . ./.venv/bin/activate && \
  #             pip install ansible-core && \
  #             ansible-test integration --venv"
  #
  # runner-sanity:
  #   name: Sanity tests on macOS and BSDs
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: &runners
  #         - macos-13
  #         - macos-14
  #         - macos-latest
  #         # - freebsd-13
  #         # - freebsd-14
  #         # - openbsd-7.6
  #         # - openbsd-7.7
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Ansible Core
  #       run: |
  #         python3 -m venv .venv
  #         . ./.venv/bin/activate
  #         pip install ansible-core
  #     - name: Run sanity tests
  #       run: ansible-test sanity --venv
  #
  # runner-units:
  #   name: Unit tests on macOS and BSDs
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: *runners
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Ansible Core
  #       run: |
  #         python3 -m venv .venv
  #         . ./.venv/bin/activate
  #         pip install ansible-core
  #     - name: Run unit tests
  #       run: ansible-test units --venv
  #
  # runner-integration:
  #   name: Integration tests on macOS and BSDs
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: *runners
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Ansible Core
  #       run: |
  #         python3 -m venv .venv
  #         . ./.venv/bin/activate
  #         pip install ansible-core
  #     - name: Run integration tests
  #       run: ansible-test integration --venv

  # build:
  #   name: Build Collection
  #   runs-on: ubuntu-latest
  #   needs: [sanity, units, integration, macos]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Ansible Core
  #       run: pip install ansible-core
  #     - name: Build Collection
  #       run: ansible-galaxy collection build
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ansible-collection-tarball
  #         path: ./*.tar.gz

  # publish:
  #   name: Publish to Ansible Galaxy
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: ansible-collection-tarball
  #     - name: Install Ansible Core
  #       run: pip install ansible-core
  #     - name: Publish to Galaxy
  #       run: >
  #         ansible-galaxy collection publish ./*.tar.gz
  #         --token ${{ secrets.GALAXY_API_KEY }}
