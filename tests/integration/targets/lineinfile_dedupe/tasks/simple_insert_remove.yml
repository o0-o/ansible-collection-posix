# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
# -*- mode: yaml; yaml-indent-offset: 2; indent-tabs-mode: nil; -*-
---
# GNU General Public License v3.0+
# SPDX-License-Identifier: GPL-3.0-or-later
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
#
# Copyright (c) 2025 o√ò.o (@o0-o)
#
# This file is part of the o0_o.posix Ansible Collection.

- name: Create canonical test file in the temporary directory
  ansible.builtin.copy:
    src: files/canonical.txt
    dest: "{{ lif_test_dir }}/test.txt"
    mode: '0600'
  check_mode: false

- name: Ensure a new line is inserted into an empty file
  o0_o.posix.lineinfile_dedupe:
    path: "{{ lif_test_dir }}/test.txt"
    line: 'Hello world'
    state: present
    _force_raw: "{{ _force_raw }}"
  register: lineinfile_reg

- name: Assert change
  ansible.builtin.assert:
    that:
      - lineinfile_reg is changed

- name: Assert raw is expected value
  ansible.builtin.assert:
    that:
      - lineinfile_reg['raw'] == _force_raw

- name: If not check mode
  when: not ansible_check_mode
  block:

    - name: Read back file content
      o0_o.posix.slurp64:
        src: "{{ lif_test_dir }}/test.txt"
      register: slurp_reg

    - name: Assert line is present
      ansible.builtin.assert:
        that:
          - slurp_reg['content_lines'][-1] == "Hello world"

- name: Remove line
  o0_o.posix.lineinfile_dedupe:
    path: "{{ lif_test_dir }}/test.txt"
    line: 'Hello world'
    state: absent
    _force_raw: "{{ _force_raw }}"
  register: lineinfile_reg

- name: Assert raw is expected value
  ansible.builtin.assert:
    that:
      - lineinfile_reg['raw'] == _force_raw

- name: If not check mode
  when: not ansible_check_mode
  block:

    - name: Read back file content
      o0_o.posix.slurp64:
        src: "{{ lif_test_dir }}/test.txt"
      register: slurp_reg

    - name: Assert line was removed
      ansible.builtin.assert:
        that:
          - '"Hello world" not in slurp_reg["content_lines"]'
          - lineinfile_reg is changed

- name: Assert raw is expected value
  ansible.builtin.assert:
    that:
      - lineinfile_reg['raw'] == _force_raw

- name: Check mode
  when: ansible_check_mode
  block:

    - name: Assert no change on check mode run
      ansible.builtin.assert:
        that:
          - lineinfile_reg is not changed

    - name: Remove extant line
      o0_o.posix.lineinfile_dedupe:
        path: "{{ lif_test_dir }}/test.txt"
        line: '# Repeated Line'
        state: absent
        _force_raw: "{{ _force_raw }}"
      register: lineinfile_reg

    - name: Assert raw is expected value
      ansible.builtin.assert:
        that:
          - lineinfile_reg['raw'] == _force_raw

    - name: Assert no change on check mode run
      ansible.builtin.assert:
        that:
          - lineinfile_reg is changed

    - name: Read back file content
      o0_o.posix.slurp64:
        src: "{{ lif_test_dir }}/test.txt"
      register: slurp_reg

    - name: Assert no actual change to file in check_mode
      ansible.builtin.assert:
        that:
          - '"Hello world" not in slurp_reg["content_lines"]'
          - '"# Repeated Line" in slurp_reg["content_lines"]'
